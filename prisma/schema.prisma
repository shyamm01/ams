generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    username           String?              @unique
    email              String?              @unique
    emailVerified      DateTime?
    password           String
    image              String?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    Account            Account?
    Authenticator      Authenticator[]
    Session            Session[]
    Subscription       Subscription?        @relation(fields: [subscriptionId], references: [id])
    subscriptionId     String?
    UserMenuPermission UserMenuPermission[]
}

model Account {
    id                       String   @id @default(cuid())
    userId                   String   @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    user                     User     @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Subscription {
    id           String                    @id @default(uuid())
    name         String
    price        Decimal
    duration     Int
    features     Json
    users        User[]
    menuMappings SubscriptionMenuMapping[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Menu {
    id              String                    @id @default(uuid())
    name            String
    url             String
    parentId        String?
    parent          Menu?                     @relation("MenuHierarchy", fields: [parentId], references: [id])
    children        Menu[]                    @relation("MenuHierarchy")
    order           Int
    menuMappings    SubscriptionMenuMapping[]
    userPermissions UserMenuPermission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SubscriptionMenuMapping {
    id             String       @id @default(uuid())
    subscription   Subscription @relation(fields: [subscriptionId], references: [id])
    subscriptionId String
    menu           Menu         @relation(fields: [menuId], references: [id])
    menuId         String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserMenuPermission {
    id         String       @id @default(uuid())
    user       User         @relation(fields: [userId], references: [id])
    userId     String
    menu       Menu         @relation(fields: [menuId], references: [id])
    menuId     String
    permission Permission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Permission {
    id                   String              @id @default(uuid())
    value                String
    name                 String
    UserMenuPermission   UserMenuPermission? @relation(fields: [userMenuPermissionId], references: [id])
    userMenuPermissionId String?
}
